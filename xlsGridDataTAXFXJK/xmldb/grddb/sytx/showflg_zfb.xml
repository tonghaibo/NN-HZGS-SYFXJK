<?xml version='1.0' encoding='GBK'?><mdroot><grdds>
<ROWSET>
<ROW num="0" ><MWTYP >M</MWTYP><MWID >showflg_zfb</MWID><NAME >支付宝组件</NAME><NOTE ></NOTE><NOACCNAME ></NOACCNAME><FILE >showflg_zfb.zxg</FILE><SCENE ></SCENE><FIXED ></FIXED><CATTYP >showflg</CATTYP><DTLRNG ></DTLRNG><BATINP ></BATINP><MANUNIT ></MANUNIT><USESMLUNT ></USESMLUNT><ITEMTABLE ></ITEMTABLE><BILHDRTABLE ></BILHDRTABLE><BILDTLTABLE ></BILDTLTABLE><COLLIST ></COLLIST><WHERE ></WHERE><ORDER ></ORDER><DBNAME ></DBNAME><LISTSUM ></LISTSUM><LOADDATA ></LOADDATA><CHECKTITLE ></CHECKTITLE><IFBILL ></IFBILL><EXTJS ></EXTJS><JAVACLS ></JAVACLS><POST2MWID ></POST2MWID><LMS ></LMS><WIDTHMOD ></WIDTHMOD><HEIGHTMOD ></HEIGHTMOD><CLIENTCLASS ></CLIENTCLASS><SHOWBTN ></SHOWBTN><CLOSEPAGES ></CLOSEPAGES><syt >x</syt></ROW>
</ROWSET>
</grdds><grdjsds>
<ROWSET>
<ROW num="0" ><GRDJSDS_VALUE ></GRDJSDS_VALUE></ROW>
</ROWSET>
</grdjsds><grdosds>
<ROWSET>
<ROW num="0" ><GRDOSDS_VALUE >var pubpack = new JavaPackage ( &amp;quot;com.xlsgrid.net.pub&amp;quot; );
var conf = new JavaPackage ( &amp;quot;com.xlsgrid.net.alipay.config.*&amp;quot; );
var aliutl = new JavaPackage ( &amp;quot;com.xlsgrid.net.alipay.util&amp;quot; );
var javapack = new JavaPackage ( &amp;quot;java.util&amp;quot; );
var alipay= new JavaPackage ( &amp;quot;com.xlsgrid.net.alipay.config&amp;quot;);
var md= new JavaPackage ( &amp;quot;com.xlsgrid.net.alipay.sign&amp;quot;);
var util = new JavaPackage ( &amp;quot;java.util.*&amp;quot; );


function alipaydirect(){
		
		var db=null;
		var bilid=pubpack.EAFunc.NVL( request.getParameter(&amp;quot;BILID&amp;quot;),&amp;quot;&amp;quot;);//获取bilid

		var sql=&amp;quot;select * from (&amp;quot;+TSQL+&amp;quot;) where bilid=&amp;apos;&amp;quot;+bilid+&amp;quot;&amp;apos;&amp;quot;;
		var payment_type = &amp;quot;1&amp;quot;; 	//支付类型
		var notify_url =NTFYURL; 	//服务器异步通知页面路径   &amp;quot;http://商户网关地址/create_direct_pay_by_user-JAVA-GBK/notify_url.jsp&amp;quot;;
		var return_url =RETURL;  	//页面跳转同步通知页面路径  &amp;quot;http://商户网关地址/create_direct_pay_by_user-JAVA-GBK/return_url.jsp&amp;quot;;

		var out_trade_no =&amp;quot;&amp;quot;;		//商户订单号
		var subject =&amp;quot;&amp;quot;;		//订单名称
		var total_fee =&amp;quot;&amp;quot;;		//付款金额
		var body =&amp;quot;&amp;quot;;			//订单描述
		var show_url =&amp;quot;&amp;quot;;		//商品展示地址
		var anti_phishing_key = &amp;quot;&amp;quot;; 	//防钓鱼时间戳  若要使用请调用类文件submit中的query_timestamp函数
		var exter_invoke_ip = &amp;quot;&amp;quot;; 	//客户端的IP地址 非局域网的外网IP地址，如：221.0.0.1
		
		try{
			db=new pubpack.EADatabase();
			var ds=db.QuerySQL(sql);
			if(ds.getRowCount()&amp;gt;0){
				out_trade_no =ds.getStringAt(0,&amp;quot;bilid&amp;quot;);	//商户订单号 商户网站订单系统中唯一订单号
				subject =ds.getStringAt(0,&amp;quot;bilnam&amp;quot;);		//订单名称 
				total_fee =ds.getStringAt(0,&amp;quot;money&amp;quot;);	//付款金额 		
				body =ds.getStringAt(0,&amp;quot;note&amp;quot;);		//订单描述
				show_url =ds.getStringAt(0,&amp;quot;url&amp;quot;);	//商品展示地址 需以http://开头的完整路径，例如：http://www.商户网址.com/myorder.html 
			}
			else{
				if(bilid!=&amp;quot;&amp;quot;)
					return &amp;quot;未找到订单号为&amp;quot;+bilid+&amp;quot;数据！&amp;quot;;
				else
					return &amp;quot;地址栏BILID为空或未定义！&amp;quot;;
			}
//			out_trade_no =&amp;quot;abc481&amp;quot;;
			//把请求参数打包成数组
			var sParaTemp = new javapack.HashMap();
			sParaTemp.put(&amp;quot;service&amp;quot;, &amp;quot;create_direct_pay_by_user&amp;quot;);
		        sParaTemp.put(&amp;quot;partner&amp;quot;,PARTNER);// 合作身份者ID，以2088开头由16位纯数字组成的字符串
		        sParaTemp.put(&amp;quot;seller_email&amp;quot;,SELLER_EMAIL);// 收款支付宝账号
		        sParaTemp.put(&amp;quot;_input_charset&amp;quot;,alipay.AlipayConfig.input_charset); // 字符编码格式 目前支持 gbk 或 utf-8
//		        sParaTemp.put(&amp;quot;key&amp;quot;,KEY); // 商户的私钥
		        sParaTemp.put(&amp;quot;sign_type&amp;quot;,&amp;quot;MD5&amp;quot;); // 
		        
			sParaTemp.put(&amp;quot;payment_type&amp;quot;,payment_type);
			sParaTemp.put(&amp;quot;notify_url&amp;quot;, notify_url);
			sParaTemp.put(&amp;quot;return_url&amp;quot;, return_url);
			sParaTemp.put(&amp;quot;out_trade_no&amp;quot;, out_trade_no);
			sParaTemp.put(&amp;quot;subject&amp;quot;, subject);
			sParaTemp.put(&amp;quot;total_fee&amp;quot;, total_fee);
			sParaTemp.put(&amp;quot;body&amp;quot;, body);
			sParaTemp.put(&amp;quot;show_url&amp;quot;, show_url);
			sParaTemp.put(&amp;quot;anti_phishing_key&amp;quot;, anti_phishing_key);
			sParaTemp.put(&amp;quot;exter_invoke_ip&amp;quot;, exter_invoke_ip);
			alipay.AlipayConfig.key=KEY;
			alipay.AlipayConfig.partner=PARTNER;
			alipay.AlipayConfig.seller_email=SELLER_EMAIL;
			
//			var preSignStr = aliutl.AlipayCore.createLinkString(aliutl.AlipayCore.paraFilter(sParaTemp));
//			var sign=md.MD5.sign(preSignStr,alipay.AlipayConfig.key,alipay.AlipayConfig.input_charset);
//			var boll=md.MD5.verify(preSignStr, sign,alipay.AlipayConfig.key,alipay.AlipayConfig.input_charset);

			//建立请求
			var sHtmlText =aliutl.AlipaySubmit.buildRequest(sParaTemp,&amp;quot;get&amp;quot;,&amp;quot;确认&amp;quot;);
		
			return sHtmlText ;
		}
		catch(e){
			throw new Exception(e.toString());
		}
		return &amp;quot;&amp;quot;;
}




//异步通知
function notifyurl(){
	//获取支付宝POST过来反馈信息
	var params = new javapack.HashMap();
	var requestParams = request.getParameterMap();
	for (var iter = requestParams.keySet().iterator(); iter.hasNext();) {
		var name = iter.next();

		var values = requestParams.get(name);
		
		var valueStr = &amp;quot;&amp;quot;;

		for (var i = 0; i &amp;lt; values.length(); i++) {
			valueStr = (i == values.length() - 1) ? valueStr + values[i]:
			valueStr + values[i] + &amp;quot;,&amp;quot;;
		}
		//乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化

		valueStr = pubpack.EAFunc.encodeString(valueStr,&amp;quot;gbk&amp;quot;,&amp;quot;gbk&amp;quot;); 
		
		params.put(name, valueStr);
	}
	
	//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
	//商户订单号 	
	var out_trade_no =pubpack.EAFunc.NVL( request.getParameter(&amp;quot;out_trade_no&amp;quot;),&amp;quot;&amp;quot;);

	//支付宝交易号 
	var trade_no = pubpack.EAFunc.NVL(request.getParameter(&amp;quot;trade_no&amp;quot;),&amp;quot;&amp;quot;);

	//交易状态
	var trade_status =pubpack.EAFunc.NVL(request.getParameter(&amp;quot;trade_status&amp;quot;),&amp;quot;&amp;quot;);

	//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//

	if(aliutl.AlipayNotify.verify(params)){//验证成功
		//////////////////////////////////////////////////////////////////////////////////////////
		//请在这里加上商户的业务逻辑程序代码
		
		//--请根据您的业务逻辑来编写程序（以下代码仅作参考）--
		
		if(trade_status.equals(&amp;quot;TRADE_FINISHED&amp;quot;)){
			//判断该笔订单是否在商户网站中已经做过处理
				//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
				//如果有做过处理，不执行商户的业务程序
			var eas = new pubpack.EAScript(null);
			eas.DefineScopeVar(&amp;quot;request&amp;quot;, request);
			var ret =  eas.CallClassFunc(&amp;quot;YXIMAGES_RETZFB&amp;quot;,&amp;quot;savezfdtl&amp;quot;,null).castToString();
			//注意：
			//退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
		} else if (trade_status.equals(&amp;quot;TRADE_SUCCESS&amp;quot;)){
			//判断该笔订单是否在商户网站中已经做过处理
				//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
				//如果有做过处理，不执行商户的业务程序
			var eas = new pubpack.EAScript(null);
			eas.DefineScopeVar(&amp;quot;request&amp;quot;, request);
			var ret =  eas.CallClassFunc(&amp;quot;YXIMAGES_RETZFB&amp;quot;,&amp;quot;savezfdtl&amp;quot;,null).castToString();
			//注意：
			//付款完成后，支付宝系统发送该交易状态通知
		}

		//--请根据您的业务逻辑来编写程序（以上代码仅作参考）--
			
//		out.println(&amp;quot;success&amp;quot;);	//请不要修改或删除
		return &amp;quot;success&amp;quot;;

	}else{
		//验证失败
//		out.println(&amp;quot;fail&amp;quot;);
		return &amp;quot;fail&amp;quot;;
	}
}
//同步通知
function returnurl(){
	//获取支付宝GET过来反馈信息

	var params = new javapack.HashMap();
	var requestParams = request.getParameterMap();
	for (var iter = requestParams.keySet().iterator(); iter.hasNext();) {
		var name = iter.next();

		var values = requestParams.get(name);
		
		var valueStr = &amp;quot;&amp;quot;;

		for (var i = 0; i &amp;lt; values.length(); i++) {
			valueStr = (i == values.length() - 1) ? valueStr + values[i]:
			valueStr + values[i] + &amp;quot;,&amp;quot;;
		}
		//乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化

		valueStr = pubpack.EAFunc.encodeString(valueStr,&amp;quot;gbk&amp;quot;,&amp;quot;gbk&amp;quot;); 
		
		params.put(name, valueStr);
	}
	
	//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
	//商户订单号 	
	var out_trade_no =pubpack.EAFunc.NVL( request.getParameter(&amp;quot;out_trade_no&amp;quot;),&amp;quot;&amp;quot;);

	//支付宝交易号 
	var trade_no = pubpack.EAFunc.NVL(request.getParameter(&amp;quot;trade_no&amp;quot;),&amp;quot;&amp;quot;);

	//交易状态
	var trade_status =pubpack.EAFunc.NVL(request.getParameter(&amp;quot;trade_status&amp;quot;),&amp;quot;&amp;quot;);
	
	var pricess=pubpack.EAFunc.NVL(request.getParameter(&amp;quot;PRICESS&amp;quot;),&amp;quot;&amp;quot;);
	
	//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//
	
//	var sign=params.get(&amp;quot;sign&amp;quot;);
//	var preSignStr = aliutl.AlipayCore.createLinkString(aliutl.AlipayCore.paraFilter(params));
//	return params.get(&amp;quot;notify_id&amp;quot;);
//	var boll=md.MD5.verify(preSignStr, sign,alipay.AlipayConfig.key,alipay.AlipayConfig.input_charset);

	if(aliutl.AlipayNotify.verify(params)){//验证成功
		//////////////////////////////////////////////////////////////////////////////////////////
		//请在这里加上商户的业务逻辑程序代码

		//--请根据您的业务逻辑来编写程序（以下代码仅作参考）--
		if(trade_status.equals(&amp;quot;TRADE_FINISHED&amp;quot;) || trade_status.equals(&amp;quot;TRADE_SUCCESS&amp;quot;)){
			//判断该笔订单是否在商户网站中已经做过处理
			//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
			//如果有做过处理，不执行商户的业务程序
			
			var eas = new pubpack.EAScript(null);
			eas.DefineScopeVar(&amp;quot;request&amp;quot;, request);
			var ret =  eas.CallClassFunc(&amp;quot;YXIMAGES_RETZFB&amp;quot;,&amp;quot;savezfdtl&amp;quot;,null).castToString();
			return ret;
		}
		
		//该页面可做页面美工编辑
//		out.println(&amp;quot;验证成功&amp;lt;br /&amp;gt;&amp;quot;);
		return &amp;quot;验证成功&amp;lt;br/&amp;gt;&amp;quot;;
		//--请根据您的业务逻辑来编写程序（以上代码仅作参考）--

		//////////////////////////////////////////////////////////////////////////////////////////
	}else{
		//该页面可做页面美工编辑
//		out.println(&amp;quot;验证失败&amp;quot;);
		return &amp;quot;验证失败&amp;quot;;
	}
}



</GRDOSDS_VALUE></ROW>
</ROWSET>
</grdosds><fldhdr>
<ROWSET>
<ROW num="0" ><BILID >1单据编号</BILID><STAT >0单据状态</STAT><SUBTYP >0子类型</SUBTYP><CORPID >0往来单位编号</CORPID><CORPNAM >0往来单位名称</CORPNAM><LOCID >0仓库|部门编号</LOCID><LOCNAM >0仓库|部门名称</LOCNAM><DAT >0单据日期</DAT><CRTUSR >1录入人</CRTUSR><CRTUSRNAM >0录入人姓名</CRTUSRNAM><CRTDAT >0录入日期</CRTDAT><CHKUSR >1审核人</CHKUSR><CHKUSRNAM >0审核人姓名</CHKUSRNAM><CHKDAT >0审核日期</CHKDAT><SUMQTY >0合计金额</SUMQTY><SUMMNY >0合计金额</SUMMNY><REFID1 >0扩展字段</REFID1><REFNAM1 >0扩展字段</REFNAM1><REFID2 >0扩展字段</REFID2><REFNAM2 >0扩展字段</REFNAM2><REFID3 >0扩展字段</REFID3><REFNAM3 >0扩展字段</REFNAM3><REFID4 >0扩展字段</REFID4><REFNAM4 >0扩展字段</REFNAM4><REFID5 >0扩展字段</REFID5><REFNAM5 >0扩展字段</REFNAM5><REFID6 >0扩展字段</REFID6><REFNAM6 >0扩展字段</REFNAM6><NOTE >0备注</NOTE></ROW>
</ROWSET>
</fldhdr><flddtl>
<ROWSET>
<ROW num="0" ><SEQID >1明细序号</SEQID><ITMID >1品种编号</ITMID><ITMNAM >0品种名称</ITMNAM><ITEMPC >0品种批次号</ITEMPC><ITMSPC >0规格</ITMSPC><UNIT >0计量单位</UNIT><SMLUNT >0小计量单位</SMLUNT><UNTNUM >0大单位转小单位因子</UNTNUM><PRICE >0价格</PRICE><QTY >0数量</QTY><TAXTYP >0税率类型</TAXTYP><NOTAXMNY >0不含税税额</NOTAXMNY><TAXMNY >0税额</TAXMNY><MNY >0下单金额</MNY><REFID1 >0扩展字段</REFID1><REFNAM1 >0扩展字段</REFNAM1><REFID2 >0扩展字段</REFID2><REFNAM2 >0扩展字段</REFNAM2><REFID3 >0扩展字段</REFID3><REFNAM3 >0扩展字段</REFNAM3><REFID4 >0扩展字段</REFID4><REFNAM4 >0扩展字段</REFNAM4><REFID5 >0扩展字段</REFID5><REFNAM5 >0扩展字段</REFNAM5></ROW>
</ROWSET>
</flddtl></mdroot>