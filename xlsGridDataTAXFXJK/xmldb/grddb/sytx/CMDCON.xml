<?xml version='1.0' encoding='GBK'?><mdroot><grdds>
<ROWSET>
<ROW num="0" ><MWTYP >M</MWTYP><MWID >CMDCON</MWID><NAME ></NAME><NOTE ></NOTE><NOACCNAME ></NOACCNAME><FILE >CMDCON.zxg</FILE><FIXED ></FIXED><CATTYP ></CATTYP><DTLRNG ></DTLRNG><BATINP ></BATINP><MANUNIT ></MANUNIT><ORDER ></ORDER><EXTJS ></EXTJS><JAVACLS ></JAVACLS><syt >x</syt></ROW>
</ROWSET>
</grdds><grdbtnds>
<ROWSET>
<ROW num="0" ><ID >exec</ID><NAME >执行</NAME><TIP ></TIP><BTNORD ></BTNORD><IMG ></IMG><IMGMOUSE ></IMGMOUSE></ROW>
<ROW num="1" ><ID >Zipfile</ID><NAME >压缩文件</NAME><TIP ></TIP><BTNORD ></BTNORD><IMG ></IMG><IMGMOUSE ></IMGMOUSE></ROW>
</ROWSET>
</grdbtnds><grdjsds>
<ROWSET>
<ROW num="0" ><GRDJSDS_VALUE >
//数据加载完毕
function _thisOnpost_loaddata(sheet)
{
  _this.SetCellBkColor(sheet,-1,-1,255,255,255);
  //_this.SetToCodeEditor(&amp;quot;&amp;quot;,sheet,0,0,&amp;apos;&amp;apos;,&amp;apos;&amp;apos;,&amp;apos;&amp;apos;);
  _this.SetToCodeEditor(&amp;quot;&amp;quot;,sheet,1,0,&amp;apos;&amp;apos;,&amp;apos;&amp;apos;,&amp;apos;&amp;apos;);
  
}

//修改单元格内容
function _thisOnCellModify(sheet,row,col,oldvalue,newvalue)
{
  if(row==0)
  {
//exec()
  }   
}

//undefined
function exec()
{
    var param = new Object();
    param.cmd = _this.GetCellText(0,0,0);
    var ret = invokeOSFuncExt(&amp;apos;docmd&amp;apos;,param);
    _this.SetCellText(0,1,0,ret);
    //alert(ret);    
}

//压缩文件
function Zipfile()
{
	alert(_this.ZipFile(&amp;quot;c:\\zip.htm&amp;quot;,&amp;quot;&amp;quot; ));  
}
</GRDJSDS_VALUE></ROW>
</ROWSET>
</grdjsds><grdosds>
<ROWSET>
<ROW num="0" ><GRDOSDS_VALUE >var pub = new JavaPackage(&amp;quot;com.xlsgrid.net.pub&amp;quot;);

var cvshome = pub.EAOption.dynaDataRoot;

function arrayList2Str(al)
{
  var i = al.iterator();
  var hasNext = i.hasNext();
  var ret=&amp;quot;&amp;quot;;
  while (hasNext)
  {
      ret += i.next()+&amp;quot;\n&amp;quot;;
      hasNext = i.hasNext();
  }  
  return ret;
}

var lastState=0; 
function doHostCMD(cmds,workpath,msg)
{
   var err=new java.util.ArrayList();
   try
   {
      lastState = //pub.EAFunc.
      	run(cmds,workpath,msg,err);
      /*if(lastState &amp;lt;0)
      {
        var emsg=arrayList2Str(err);
        if(msg!=null)
          emsg += arrayList2Str(msg);
        throw new Exception(emsg);
      }*/
      return arrayList2Str(err);//err.toString();
   }
   finally
   {
      err.clear();
   }
}

function docmd()
{
  var cmds= cmd.split(&amp;quot; &amp;quot;);
  //throw new Exception(cmds);
  var msg = new java.util.ArrayList();
  var errmsg = doHostCMD(cmds,cvshome,msg);
  //if(lastState!=0) throw new Exception(errmsg);
  return errmsg+arrayList2Str(msg);
}

function cvslogin()
{
  var errmsg = cvsAction([&amp;quot;login&amp;quot;,&amp;quot;-p&amp;quot;,pwd],cvshome,null);
  if(lastState!=0)
    throw new Exception(errmsg);
}

//var taskTimeout = 1000 * 60 * 5;//time out 5 min
var taskTimeout = 1000 * 20;

function run(cmd,workdirectory, out, err)// throws EAException
  {
      function destroyTask(p) extends java.util.TimerTask() {
        var proc=p;
        
        function run() {
          if(proc != null)
            proc.destroy();
          proc = null;
        }
      }
    var line=null;
    var result=-1;
    //try {
      //set working directory
      var proc = java.lang.Runtime.getRuntime().exec(cmd,null,new java.io.File(workdirectory));
      var in=proc.getInputStream();
      if(err!=null)
      {
        var errout = new StreamGobbler(proc.getErrorStream(), err);            
        errout.start();
      }
      if(out!=null)
      {
        var stdout = new StreamGobbler(proc.getInputStream(), out);
        stdout.start();
      }
      var timer = new java.util.Timer(false);
      timer.schedule(new destroyTask(proc), new java.util.Date(System.currentTimeMillis() + taskTimeout));
      result = proc.waitFor();
      timer.cancel();
//    } catch (ex) {
//        throw new Exception(ex.toString());
//    }
    return result;
  }


function StreamGobbler(ais,aal) extends java.lang.Thread()
{
    var is;
    //var type;
    var al;
    
        this.is = ais;
        //this.type = type;
        this.al = aal;
    
    function run()
    {
        try
        {
            var isr = new java.io.InputStreamReader(is);
            var br = new  java.io.BufferedReader(isr);
            var line=null;
            while ( (line = br.readLine()) != null)
            {
              al.add(line);
            }
        } catch (ioe)
          {
            ioe.printStackTrace();  
          }
    }
}</GRDOSDS_VALUE></ROW>
</ROWSET>
</grdosds><fldhdr>
<ROWSET>
<ROW num="0" ><BILID >1单据编号</BILID><STAT >0单据状态</STAT><SUBTYP >0子类型</SUBTYP><CORPID >0往来单位编号</CORPID><CORPNAM >0往来单位名称</CORPNAM><LOCID >0仓库|部门编号</LOCID><LOCNAM >0仓库|部门名称</LOCNAM><DAT >0单据日期</DAT><CRTUSR >1录入人</CRTUSR><CRTUSRNAM >0录入人姓名</CRTUSRNAM><CRTDAT >0录入日期</CRTDAT><CHKUSR >1审核人</CHKUSR><CHKUSRNAM >0审核人姓名</CHKUSRNAM><CHKDAT >0审核日期</CHKDAT><SUMQTY >0合计金额</SUMQTY><SUMMNY >0合计金额</SUMMNY><REFID1 >0参考编号1</REFID1><REFNAM1 >0参考名称1</REFNAM1><REFID2 >0参考编号2</REFID2><REFNAM2 >0参考名称2</REFNAM2><REFID3 >0参考编号3</REFID3><REFNAM3 >0参考名称3</REFNAM3><REFID4 >0参考编号4</REFID4><REFNAM4 >0参考名称4</REFNAM4><REFID5 >0参考编号5</REFID5><REFNAM5 >0参考名称5</REFNAM5><REFID6 >0参考编号6</REFID6><REFNAM6 >0参考名称6</REFNAM6><NOTE >0备注信息</NOTE></ROW>
</ROWSET>
</fldhdr><flddtl>
<ROWSET>
<ROW num="0" ><SEQID >1明细序号</SEQID><ITMID >1品种编号</ITMID><ITMNAM >0品种名称</ITMNAM><ITEMPC >0品种批次号</ITEMPC><ITMSPC >0规格</ITMSPC><UNIT >0计量单位</UNIT><SMLUNT >0小计量单位</SMLUNT><UNTNUM >0大单位转小单位因子</UNTNUM><PRICE >0价格</PRICE><QTY >0数量</QTY><TAXTYP >0税率类型</TAXTYP><NOTAXMNY >0不含税税额</NOTAXMNY><TAXMNY >0税额</TAXMNY><MNY >0下单金额</MNY><REFID1 >0参考编号1</REFID1><REFNAM1 >0参考名称1</REFNAM1><REFID2 >0参考编号2</REFID2><REFNAM2 >0参考名称2</REFNAM2><REFID3 >0参考编号3</REFID3><REFNAM3 >0参考名称3</REFNAM3></ROW>
</ROWSET>
</flddtl></mdroot>