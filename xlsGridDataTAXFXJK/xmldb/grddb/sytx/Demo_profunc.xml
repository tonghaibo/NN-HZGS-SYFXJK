<?xml version='1.0' encoding='GBK'?><mdroot><grdds>
<ROWSET>
<ROW num="0" ><MWTYP >M</MWTYP><MWID >Demo_profunc</MWID><NAME >存储过程调用示例</NAME><NOTE ></NOTE><NOACCNAME ></NOACCNAME><FILE >Demo_profunc.zxg</FILE><SCENE ></SCENE><FIXED ></FIXED><CATTYP ></CATTYP><DTLRNG ></DTLRNG><BATINP ></BATINP><MANUNIT ></MANUNIT><USESMLUNT ></USESMLUNT><ITEMTABLE ></ITEMTABLE><BILHDRTABLE ></BILHDRTABLE><BILDTLTABLE ></BILDTLTABLE><COLLIST ></COLLIST><WHERE ></WHERE><ORDER ></ORDER><DBNAME ></DBNAME><LISTSUM ></LISTSUM><LOADDATA ></LOADDATA><CHECKTITLE ></CHECKTITLE><IFBILL ></IFBILL><EXTJS ></EXTJS><JAVACLS ></JAVACLS><POST2MWID ></POST2MWID><LMS ></LMS><WIDTHMOD ></WIDTHMOD><HEIGHTMOD ></HEIGHTMOD><CLIENTCLASS ></CLIENTCLASS><SHOWBTN ></SHOWBTN><CLOSEPAGES ></CLOSEPAGES><syt >x</syt></ROW>
</ROWSET>
</grdds><grdjsds>
<ROWSET>
<ROW num="0" ><GRDJSDS_VALUE >
//调用过程
function run_prod()
{
	try {
		var ret = invokeOSFunc(&amp;quot;invokeProcedure&amp;quot;,&amp;quot;&amp;quot;);
		alert(ret);
	}
	catch (e) {
		alert(e);
	}
}

//调用函数
function run_func()
{
	try {
		var ret = invokeOSFunc(&amp;quot;invokeFunction&amp;quot;,&amp;quot;&amp;quot;);
		alert(ret);
	}
	catch (e) {
		alert(e);
	}
}

//点击按钮
function _thisOnButtonCtrlClick(id,sheet,row,col)
{
	if (id == &amp;quot;调用存储过程&amp;quot;) {
		 run_prod();
	}
	else if (id == &amp;quot;调用函数&amp;quot;) {
		 run_func();
	}
}

//数据加载完毕
function _thisOnpost_loaddata(sheet)
{
	_this.SplitSheet(sheet,&amp;quot;H&amp;quot;,&amp;quot;40%&amp;quot;);
	_this.SetToCodeEditor(&amp;quot;&amp;quot;,1,-1,-1,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;);
	
	var demostr = invokeOSFunc(&amp;quot;getDemoStr&amp;quot;);
	_this.SetCellText(1,-1,-1,demostr);
}
</GRDJSDS_VALUE></ROW>
</ROWSET>
</grdjsds><grdosds>
<ROWSET>
<ROW num="0" ><GRDOSDS_VALUE >var pub = new JavaPackage(&amp;quot;com.xlsgrid.net.pub&amp;quot;);
var orajdbc = new JavaPackage(&amp;quot;oracle.jdbc&amp;quot;);

//调用存储过程
function invokeProcedure()
{
	var db = null;
	var ret = &amp;quot;&amp;quot;;
	try {
		db = new pub.EADatabase();
		var conn = db.GetConn();
		var statement = conn.createStatement();
		var in_price = &amp;quot;5.0&amp;quot;;
		var stmt = conn.prepareCall(&amp;quot;call P_GET_PRICE(?,?,?,?)&amp;quot;);
		stmt.registerOutParameter(1, java.sql.Types.FLOAT);
		stmt.registerOutParameter(2, java.sql.Types.CHAR);
		stmt.registerOutParameter(3, orajdbc.OracleTypes.CURSOR);
		stmt.setString(4, in_price);
		stmt.executeUpdate();

		var retCode = stmt.getInt(1);
		var retMsg = stmt.getString(2);
		ret += &amp;quot;retCode:&amp;quot; + retCode + &amp;quot;; retMsg:&amp;quot; + retMsg + &amp;quot;;\n&amp;quot;;
		if (retCode == -1) { // 如果出错时，返回错误信息
                	return &amp;quot;报错！&amp;quot;;
            	} 
            	else {
	                // 取得结果集
	                var rs = stmt.getCursor(3);
	                var ric;
	                var price;
	                var updated;
	                // 对结果进行输出
	                while (rs.next()) {
	                    ric = rs.getString(1);
	                    price = rs.getString(2);
	                    updated = rs.getString(3);
	                    ret += &amp;quot;ric:&amp;quot; + ric + &amp;quot;;price:&amp;quot; + price + &amp;quot;; updated:&amp;quot; + updated + &amp;quot;; \n&amp;quot;;
	                }
		}
            return ret;
	}
	catch (e) {
		if (db != null) db.Rollback();
		return e.toString();
	}
	finally {
		if (db != null) db.Close();
	}
}

//调用函数
function invokeFunction()
{
	var db = null;
	var ret = &amp;quot;&amp;quot;;
	try {
		db = new pub.EADatabase();
		var conn = db.GetConn();
		var statement = conn.createStatement();
		var in_price = &amp;quot;4.0&amp;quot;;
		// 调用函数
	        var stmt = conn.prepareCall(&amp;quot;{? = call F_GET_PRICE(?)}&amp;quot;);
	        stmt.registerOutParameter(1, orajdbc.OracleTypes.CURSOR);
	        stmt.setString(2, in_price);
	        stmt.executeUpdate();
	        // 取得结果集
	        var rs = stmt.getCursor(1);
	        var ric;
	        var price;
	        var updated;
	
	        while (rs.next()) {
			ric = rs.getString(1);
	                price = rs.getString(2);
	                updated = rs.getString(3);
	                ret += &amp;quot;ric:&amp;quot; + ric + &amp;quot;; price:&amp;quot; + price + &amp;quot;; &amp;quot; + updated + &amp;quot;; \n&amp;quot;;
	            }
            return ret;
	}
	catch (e) {
		if (db != null) db.Rollback();
		return e.toString();
	}
	finally {
		if (db != null) db.Close();
	}
}

function getDemoStr()
{
	var demostr = &amp;quot;
--创建表格
CREATE TABLE STOCK_PRICES(
    RIC VARCHAR(6) PRIMARY KEY,
    PRICE NUMBER(7,2),
    UPDATED DATE );
	
--插入数据
INSERT INTO stock_prices values(&amp;apos;1111&amp;apos;,1.0,SYSDATE);
INSERT INTO stock_prices values(&amp;apos;1112&amp;apos;,2.0,SYSDATE);
INSERT INTO stock_prices values(&amp;apos;1113&amp;apos;,3.0,SYSDATE);
INSERT INTO stock_prices values(&amp;apos;1114&amp;apos;,4.0,SYSDATE);

--建立一个返回游标
CREATE OR REPLACE PACKAGE PKG_PUB_UTILS IS
    --动态游标
    TYPE REFCURSOR IS REF CURSOR;
END PKG_PUB_UTILS;

--创建存储过程
CREATE OR REPLACE PROCEDURE P_GET_PRICE
(
  AN_O_RET_CODE OUT NUMBER,
  AC_O_RET_MSG  OUT VARCHAR2,
  CUR_RET OUT PKG_PUB_UTILS.REFCURSOR,
  AN_I_PRICE IN NUMBER
) 
IS
BEGIN
    AN_O_RET_CODE := 0;
    AC_O_RET_MSG  := &amp;apos;操作成功&amp;apos;;
    
    OPEN CUR_RET FOR
        SELECT * FROM STOCK_PRICES WHERE PRICE&amp;lt;AN_I_PRICE;
EXCEPTION
    WHEN OTHERS THEN
        AN_O_RET_CODE := -1;
        AC_O_RET_MSG  := &amp;apos;错误代码:&amp;apos; || SQLCODE || CHR(13) || &amp;apos;错误信息:&amp;apos; || SQLERRM;
END P_GET_PRICE;

--创建函数：F_GET_PRICE
CREATE OR REPLACE FUNCTION F_GET_PRICE(v_price IN NUMBER)
    RETURN PKG_PUB_UTILS.REFCURSOR
AS
    stock_cursor PKG_PUB_UTILS.REFCURSOR;
BEGIN
    OPEN stock_cursor FOR
    SELECT * FROM stock_prices WHERE price &amp;lt; v_price;
    RETURN stock_cursor;
END;	&amp;quot;;
		
	return demostr;		
}
</GRDOSDS_VALUE></ROW>
</ROWSET>
</grdosds><fldhdr>
<ROWSET>
<ROW num="0" ><BILID >1单据编号</BILID><STAT >0单据状态</STAT><SUBTYP >0子类型</SUBTYP><CORPID >0往来单位编号</CORPID><CORPNAM >0往来单位名称</CORPNAM><LOCID >0仓库|部门编号</LOCID><LOCNAM >0仓库|部门名称</LOCNAM><DAT >0单据日期</DAT><CRTUSR >1录入人</CRTUSR><CRTUSRNAM >0录入人姓名</CRTUSRNAM><CRTDAT >0录入日期</CRTDAT><CHKUSR >1审核人</CHKUSR><CHKUSRNAM >0审核人姓名</CHKUSRNAM><CHKDAT >0审核日期</CHKDAT><SUMQTY >0合计金额</SUMQTY><SUMMNY >0合计金额</SUMMNY><REFID1 >0扩展字段</REFID1><REFNAM1 >0扩展字段</REFNAM1><REFID2 >0扩展字段</REFID2><REFNAM2 >0扩展字段</REFNAM2><REFID3 >0扩展字段</REFID3><REFNAM3 >0扩展字段</REFNAM3><REFID4 >0扩展字段</REFID4><REFNAM4 >0扩展字段</REFNAM4><REFID5 >0扩展字段</REFID5><REFNAM5 >0扩展字段</REFNAM5><REFID6 >0扩展字段</REFID6><REFNAM6 >0扩展字段</REFNAM6><NOTE >0备注</NOTE></ROW>
</ROWSET>
</fldhdr><flddtl>
<ROWSET>
<ROW num="0" ><SEQID >1明细序号</SEQID><ITMID >1品种编号</ITMID><ITMNAM >0品种名称</ITMNAM><ITEMPC >0品种批次号</ITEMPC><ITMSPC >0规格</ITMSPC><UNIT >0计量单位</UNIT><SMLUNT >0小计量单位</SMLUNT><UNTNUM >0大单位转小单位因子</UNTNUM><PRICE >0价格</PRICE><QTY >0数量</QTY><TAXTYP >0税率类型</TAXTYP><NOTAXMNY >0不含税税额</NOTAXMNY><TAXMNY >0税额</TAXMNY><MNY >0下单金额</MNY><REFID1 >0扩展字段</REFID1><REFNAM1 >0扩展字段</REFNAM1><REFID2 >0扩展字段</REFID2><REFNAM2 >0扩展字段</REFNAM2><REFID3 >0扩展字段</REFID3><REFNAM3 >0扩展字段</REFNAM3><REFID4 >0扩展字段</REFID4><REFNAM4 >0扩展字段</REFNAM4><REFID5 >0扩展字段</REFID5><REFNAM5 >0扩展字段</REFNAM5></ROW>
</ROWSET>
</flddtl></mdroot>