<?xml version='1.0' encoding='GBK'?><mdroot><grdds>
<ROWSET>
<ROW num="0" ><MWTYP >M</MWTYP><MWID >WG_HtmlParser</MWID><NAME >Html解析类</NAME><NOTE ></NOTE><NOACCNAME ></NOACCNAME><FILE >WG_HtmlParser.zxg</FILE><SCENE ></SCENE><FIXED ></FIXED><CATTYP ></CATTYP><DTLRNG ></DTLRNG><BATINP ></BATINP><MANUNIT ></MANUNIT><USESMLUNT ></USESMLUNT><ITEMTABLE ></ITEMTABLE><BILHDRTABLE ></BILHDRTABLE><BILDTLTABLE ></BILDTLTABLE><COLLIST ></COLLIST><WHERE ></WHERE><ORDER ></ORDER><DBNAME ></DBNAME><LISTSUM ></LISTSUM><LOADDATA ></LOADDATA><CHECKTITLE ></CHECKTITLE><IFBILL ></IFBILL><EXTJS ></EXTJS><JAVACLS ></JAVACLS><POST2MWID ></POST2MWID><LMS ></LMS><WIDTHMOD ></WIDTHMOD><HEIGHTMOD ></HEIGHTMOD><syt >x</syt></ROW>
</ROWSET>
</grdds><grdjsds>
<ROWSET>
<ROW num="0" ><GRDJSDS_VALUE >
//数据加载完毕
function _thisOnpost_loaddata(sheet)
{
	var msg = invokeOSFunc(&amp;quot;doRequest&amp;quot;,&amp;quot;ka=0022&amp;quot;);  
	alert(msg);
}
</GRDJSDS_VALUE></ROW>
</ROWSET>
</grdjsds><grdosds>
<ROWSET>
<ROW num="0" ><GRDOSDS_VALUE >var pubpack = new JavaPackage(&amp;quot;com.xlsgrid.net.pub&amp;quot;);
var EAfunc = new pubpack.EAFunc();
var net = new JavaPackage(&amp;quot;java.net&amp;quot;);
var htmlparser = new JavaPackage(&amp;quot;org.htmlparser&amp;quot;);
var tagFilter = new JavaPackage(&amp;quot;org.htmlparser.filters&amp;quot;);
var htmlutil = new JavaPackage(&amp;quot;org.htmlparser.util&amp;quot;);
var visitors = new JavaPackage(&amp;quot;org.htmlparser.visitors&amp;quot;);
var HClient = new JavaPackage(&amp;quot;org.apache.commons.httpclient&amp;quot;);
var method = new JavaPackage(&amp;quot;org.apache.commons.httpclient.methods&amp;quot;);
var io = new JavaPackage(&amp;quot;java.io&amp;quot;);
var text = new JavaPackage(&amp;quot;java.text&amp;quot;);
var util = new JavaPackage(&amp;quot;java.util&amp;quot;);
//================================================================// 
// 函数：urlCodeTrnas(urlstr,str)
// 说明：把中文字符编码解析成URL编码适用类型（当下载文件名：D://AA/汉字.pdf）
// 参数：url(URL字符串),str(url中需要解析的部分)
// 返回：String 解析的URL编码字符串
// 样例：
// 作者：
// 创建日期：08/04/10 13:52:58
// 修改日志：
//================================================================// 
function urlCodeTrnas(urlstr,str,code){

	var nstr = str.substring(0,str.indexOf(&amp;quot;.&amp;quot;));
	var tmp = net.URLEncoder.encode(nstr,code);
	var urlstr = urlstr.substring(0,urlstr.indexOf(nstr))+tmp+urlstr.substring(urlstr.indexOf(&amp;quot;.&amp;quot;),urlstr.length());
	return urlstr ;
}

//================================================================// 
// 函数：parserHtml(htmlstr)
// 说明：解析HTML字符串返回NodeList对象
// 参数：String htmlstr(HTML字符串)
// 返回：NodeList(NodeList对象)
// 样例：
// 作者：
// 创建日期：08/04/10 14:23:48
// 修改日志：
//================================================================// 
function parserHtml(htmlstr,code){
	
	//用返回的HTML文档字符串，指定解析编码创建解析对象
	var ps = new htmlparser.Parser();
	var parser = ps.createParser(htmlstr,code); 
	//创建HtmlPage对象
	var htmlpage = new visitors.HtmlPage(parser);
	//遍历结点
	parser.visitAllNodesWith(htmlpage);
	//得到所有的节点
	var nodelist = htmlpage.getBody();	
	return nodelist;
}

//================================================================// 
// 函数：filterHtml(nodelist,str)
// 说明：对NodeList对象进行过滤（例如：只处理&amp;lt;a&amp;gt;标签）
// 参数：nodelist,str(过滤字符串)
// 返回：一个只包含str标签的nodelist
// 样例：
// 作者：
// 创建日期：08/04/10 14:27:26
// 修改日志：
//================================================================// 
function filterHtml(nodelist,str){
	
	var filter = new tagFilter.TagNameFilter(str);
	return nodelist.extractAllNodesThatMatch(filter,true);
}

//================================================================// 
// 函数：downloadFile(url,filepath)
// 说明：下载文件到指定的路径
// 参数：url:下载文件的URL，filepath:下载到目标的文件路径
// 返回：
// 样例：
// 作者：
// 创建日期：08/04/10 14:34:08
// 修改日志：
//================================================================// 
function downloadFile(url,filepath)
{
	var httpclient = new HClient.HttpClient();
	var getMethod = new method.GetMethod(url); 					
	httpclient.executeMethod(getMethod);
	var in = getMethod.getResponseBodyAsStream();
	var fos = new io.FileOutputStream(new io.File(filepath));
	var len = 0;
	while((len = in.read())!=-1){
		fos.write(len);
	}
	in.close();
	fos.close();			
}

//================================================================// 
// 函数：parserTable(nodelist,code,elementIDX,type)
// 说明：解析HTML中的TABLE标签,&amp;lt;tr&amp;gt;--Row,&amp;lt;td&amp;gt;--Col映射成数据库表的行列结构
// 参数：一个TABLE的nodelist结构,可能有多个TABLE标签elementIDX(要处理的第几个TABLE),code(处理的字符编码),
//	 tabidxArr(元素IDX的数组),typ(o,m,om):O一个TABLE，M多个table,OM 标题是一个，明细是多个
//	 有些订单结构是标题一个TABLE，每个明细都是一个TABLE，有些订单是整个明细是一个TABLE标题是一个TR，明细是一个TR
// 返回：DS结构
// 样例：
// 作者：
// 创建日期：08/09/10 16:47:52
// 修改日志：
//================================================================// 
function parserTable(nodelist,code,tabidxArr,type)
{
	if (type.equals(&amp;quot;O&amp;quot;))	//这里的&amp;quot;O&amp;quot;不是数字“0” 是大写字母&amp;quot;O&amp;quot;表示一个	
		return parserTableOne(nodelist,code,tabidxArr);
	else if (type.equals(&amp;quot;M&amp;quot;))
		return parserTableMore(nodelist,code,tabidxArr);
	else if (type.equals(&amp;quot;OM&amp;quot;))
		return parserTableOneMore(nodelist,code,tabidxArr);
	else if (type.equals(&amp;quot;T&amp;quot;))
		return parserTableTitle(nodelist,code,tabidxArr);
} 

//================================================================// 
// 函数：parserTableOne(nodelist,code,tabidxArr)
// 说明：处理订单的明细标题与明细数据属于一个TABLE的结构
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/07/10 09:33:01
// 修改日志：
//================================================================// 
function parserTableOne(nodelist,code,tabidxArr)
{
	var node = null;	//&amp;lt;table&amp;gt;
	var rows = null;	//&amp;lt;tr&amp;gt;
	var cols = null;	//&amp;lt;td&amp;gt;
	var col_first = null;
	var Val = &amp;quot;&amp;quot;;
	var xml = &amp;quot;&amp;lt;?xml version=&amp;apos;1.0&amp;apos; encoding=&amp;apos;&amp;quot;+code+&amp;quot;&amp;apos;?&amp;gt;\n&amp;lt;ROWSET&amp;gt;\n&amp;quot;; 	
	//如果订单的标题与明细是一个TABLE的结构
	if (tabidxArr.length() == 1 ) 
	{	
		node = nodelist.elementAt(tabidxArr[0]);
		//得到所有的&amp;lt;tr&amp;gt;
		rows = node.getRows();
		
		//第一行标题作为xml的标签
		var FirstRowList = rows[0].getColumns();
		//明细数据作为xml的值	
		for (var r = 1;r &amp;lt; rows.length();r++)
		{
			var notes = &amp;quot;&amp;quot;;
			xml += &amp;quot;&amp;lt;ROW&amp;gt;\n&amp;quot;;
			cols = rows[r].getColumns();
			for (var c = 0;c &amp;lt; FirstRowList.length();c++)
			{
				if(notes != &amp;quot;&amp;quot;)
					notes += &amp;quot;,&amp;quot;;	
				var TitleVal = ReplaceStrToNull(&amp;quot;_&amp;quot;+FirstRowList[c].toPlainTextString().trim(),new Array(&amp;quot;(&amp;quot;,&amp;quot;)&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;&amp;lt;br&amp;gt;&amp;quot;,&amp;quot;&amp;nbsp;&amp;quot;,&amp;quot;+&amp;quot;));
				if(notes.indexOf(TitleVal) &amp;gt; -1)
					TitleVal = TitleVal+&amp;quot;_&amp;quot;+TitleVal; 
				if( c &amp;gt;= cols.length()) 
					Val = &amp;quot;&amp;quot;;	
				else			
					Val = ReplaceStrToNull(cols[c].toPlainTextString().trim(),new Array(&amp;quot;&amp;nbsp;&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;+&amp;quot;));
				xml += &amp;quot;&amp;lt;&amp;quot;+TitleVal+&amp;quot;&amp;gt;&amp;quot;+Val+&amp;quot;&amp;lt;/&amp;quot;+TitleVal+&amp;quot;&amp;gt;\n&amp;quot;;
				notes += TitleVal;
			}
			
			xml += &amp;quot;&amp;lt;/ROW&amp;gt;\n&amp;quot;;
		}
	}	
	xml += &amp;quot;&amp;lt;/ROWSET&amp;gt;\n&amp;quot;;
//	throw new Exception(xml);
//	throw new Exception((new pubpack.EAXmlDS(xml)).GetXml());
	return new pubpack.EAXmlDS(xml); 	
}
//================================================================// 
// 函数：parserTableMore(nodelist,code,tabidxArr)
// 说明：标题与每一行明细都是一个单独的TABLE
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/07/10 09:55:16
// 修改日志：
//================================================================// 
function parserTableMore(nodelist,code,tabidxArr)
{
	var TitleNode = nodelist.elementAt(tabidxArr[0]);
	var TitleRows = TitleNode.getRows();
	var TitleCols = TitleRows[0].getColumns();
	var xml = &amp;quot;&amp;lt;?xml version=&amp;apos;1.0&amp;apos; encoding=&amp;apos;&amp;quot;+code+&amp;quot;&amp;apos;?&amp;gt;\n&amp;lt;ROWSET&amp;gt;\n&amp;quot;; 	
	for (var i = 1;i&amp;lt;tabidxArr.length();i++)
	{		
		//明细的&amp;lt;table&amp;gt;			
		var ListNode = nodelist.elementAt(tabidxArr[i]);
		var ListRows = ListNode.getRows();
		for (var r = 0;r&amp;lt;ListRows.length();r++)
		{
			var ListCols = ListRows[r].getColumns();			
			if (ListCols.length()&amp;gt;1)
			{
				xml += &amp;quot;&amp;lt;ROW&amp;gt;\n&amp;quot;;
				for (var c = 0;c &amp;lt; ListCols.length();c++)
				{
					var TitleVal = &amp;quot;_&amp;quot;+TitleCols[c].toPlainTextString().trim();
					var Val = EAfunc.Replace(ListCols[c].toPlainTextString().trim(),&amp;quot;&amp;deg;&amp;quot;,&amp;quot;°&amp;quot;);
					xml += &amp;quot;&amp;lt;&amp;quot;+TitleVal+&amp;quot;&amp;gt;&amp;quot;+Val+&amp;quot;&amp;lt;/&amp;quot;+TitleVal+&amp;quot;&amp;gt;\n&amp;quot;;				
				}	
				xml += &amp;quot;&amp;lt;/ROW&amp;gt;\n&amp;quot;;			
			}
		}
	}	
	xml += &amp;quot;&amp;lt;/ROWSET&amp;gt;\n&amp;quot;;
	return new pubpack.EAXmlDS(xml); 	
}

//================================================================// 
// 函数：parserTableOneMore(nodelist,code,tabidxArr)
// 说明：标题是一个TABLE,明细是一个TABLE
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/07/10 10:13:41
// 修改日志：
//================================================================// 
function parserTableOneMore(nodelist,code,tabidxArr)
{
	var cols = null;	//&amp;lt;td&amp;gt;
	var xml = &amp;quot;&amp;lt;?xml version=&amp;apos;1.0&amp;apos; encoding=&amp;apos;&amp;quot;+code+&amp;quot;&amp;apos;?&amp;gt;\n&amp;lt;ROWSET&amp;gt;\n&amp;quot;;
	var TitleNode = nodelist.elementAt(tabidxArr[0]);
	var TitleRows = TitleNode.getRows();
	var TitleCols = TitleRows[0].getColumns();
	var ListRows  = nodelist.elementAt(tabidxArr[1]);
	for (var r = 1;r &amp;lt; ListRows.length();r++)
	{
		xml += &amp;quot;&amp;lt;ROW&amp;gt;\n&amp;quot;;
		cols = ListRows[r].getColumns();
		for (var c = 0;c &amp;lt; cols.length();c++)
		{
			var TitleVal = &amp;quot;_&amp;quot;+TitleCols[c].toPlainTextString().trim(); 			
			var Val = cols[c].toPlainTextString().trim();
			xml += &amp;quot;&amp;lt;&amp;quot;+TitleVal+&amp;quot;&amp;gt;&amp;quot;+Val+&amp;quot;&amp;lt;/&amp;quot;+TitleVal+&amp;quot;&amp;gt;&amp;quot;;
		}
		xml += &amp;quot;&amp;lt;/ROW&amp;gt;&amp;quot;;
	}		
	xml += &amp;quot;&amp;lt;/ROWSET&amp;gt;\n&amp;quot;;
	return new pubpack.EAXmlDS(xml);	
}

//================================================================// 
// 函数：parserTableTitle(nodelist,code,tabidxArr)
// 说明：抬头的部分因为不是规则的不能解析成XML所以用Array来保存。
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/07/10 13:41:06
// 修改日志：
//================================================================// 
function parserTableTitle(nodelist,code,tabidxArr)
{
	var str = &amp;quot;&amp;quot;;
	var ltab = nodelist.elementAt(tabidxArr[0]);
//	throw new Exception(ltab.toHtml());
	var rows = ltab.getRows();
	for (var r = 0;r&amp;lt;rows.length();r++)
	{
		var cols = rows[r].getColumns();
		for (var c = 0;c&amp;lt;cols.length();c++)
		{
			str += ReplaceStrToNull(cols[c].toPlainTextString().trim(),new Array(&amp;quot;&amp;nbsp;&amp;quot;,&amp;quot; &amp;quot;))+&amp;quot;,&amp;quot;;			
		}
	}
	return str.split(&amp;quot;,&amp;quot;);
}
//================================================================// 
// 函数：ReplaceStrToNull(str)
// 说明：过滤掉ＸＭＬ不符合的标签  
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/07/10 10:21:10
// 修改日志：
//================================================================// 
function ReplaceStrToNull(str,strArr)
{
//	var strArr = new Array(&amp;quot;(&amp;quot;,&amp;quot;)&amp;quot;,&amp;quot;/&amp;quot;);
	for (var i = 0;i&amp;lt;strArr.length();i++) 
	{	
		while(true)
		{
			if (str.indexOf(strArr[i])&amp;gt;-1)			
				str = EAfunc.Replace(str,strArr[i],&amp;quot;&amp;quot;);	
			else
			     break;
		}
	}
	return str;
}



//================================================================// 
// 函数：parserDsToString
// 说明：把DS数据转换成字符串,splitext(分割串),filterCol（过滤列）,filterStr（过滤的内容）
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/10/10 15:13:34
// 修改日志：
//================================================================// 
function parserDsToString(ds,splitext,filterCol,filterStr)
{
	var orderCols = new Array(&amp;quot;SRFLG&amp;quot;,&amp;quot;USERID&amp;quot;,&amp;quot;DEPTID&amp;quot;,&amp;quot;KAID&amp;quot;,&amp;quot;BILID&amp;quot;,&amp;quot;ECORPNAM&amp;quot;,&amp;quot;ECORPID&amp;quot;,&amp;quot;ITMCLASS&amp;quot;,
				  &amp;quot;ORDID&amp;quot;,&amp;quot;DAT&amp;quot;,&amp;quot;ARRDAT&amp;quot;,&amp;quot;TEL&amp;quot;,&amp;quot;FAX&amp;quot;,&amp;quot;SEQID&amp;quot;,&amp;quot;EITMID&amp;quot;,&amp;quot;CODE&amp;quot;,&amp;quot;SPEC&amp;quot;,&amp;quot;EITMNAM&amp;quot;,
				  &amp;quot;UNTNUM&amp;quot;,&amp;quot;QTYFLG&amp;quot;,&amp;quot;QTY&amp;quot;,&amp;quot;ZPQTY&amp;quot;,&amp;quot;EPRICE&amp;quot;,&amp;quot;CORPADDR&amp;quot;,&amp;quot;NOTE&amp;quot;,&amp;quot;ORDCONTENT&amp;quot;);
	if (splitext == &amp;quot;&amp;quot;) splitext = &amp;quot;~~~&amp;quot;;
	var str = &amp;quot;&amp;quot;;
	for (var row = 0;row &amp;lt; ds.getRowCount();row++)
	{
		if (ds.getStringDef(row,filterCol,&amp;quot;None&amp;quot;) != filterStr)
		{
			for (var i = 0;i&amp;lt;orderCols.length();i++)
			{
				str += ds.getStringDef(row,orderCols[i],&amp;quot;None&amp;quot;)+splitext;
			}
			str += &amp;quot;╃&amp;quot;;
		}	
	}
	return str;
}
function FormatDataString(datestr)
{
        var sdf = new text.SimpleDateFormat(&amp;quot;dd/MM/yyyy&amp;quot;);
        var dat = sdf.parse(datestr);
        return dat;
}

//================================================================// 
// 函数：SetLinks(url,encoding,filterStr)
// 说明：从页面取出所有符合filterStr字符串的链接,字符编码：encoding,links:返回所有链接的ArrayList
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/28/10 10:12:11
// 修改日志：
//================================================================// 
function SetLinks(httcall,url,encoding,filterStr,links)
{
	var res = httpcall.Get(url,encoding);
	//解析页面源码为page对象
	var page = parserHtml(res,encoding);
	//得到当前页所有的A标签
	var atag = filterHtml(page,&amp;quot;a&amp;quot;);
	for (var i = 0;i&amp;lt;atag.size();i++)
	{
		var attr = atag.elementAt(i).getAttribute(&amp;quot;href&amp;quot;);
		if (attr.indexOf(filterStr) &amp;gt; -1)
			links.add(attr);
	} 
	return links;	
}
//================================================================// 
// 函数：SetLinksByPost(url,encoding,filterStr)
// 说明：从页面取出所有符合filterStr字符串的链接,字符编码：encoding,links:返回所有链接的ArrayList
// 参数：
// 返回：
// 样例：
// 作者：
// 创建日期：09/28/10 10:12:11
// 修改日志：
//================================================================// 
function SetLinksByPost(httcall,url,params,encoding,filterStr,links)
{
	var res = httpcall.Post(url,params,encoding);
	//解析页面源码为page对象
	var page = parserHtml(res,encoding);
	//得到当前页所有的A标签
	var atag = filterHtml(page,&amp;quot;a&amp;quot;);
	for (var i = 0;i&amp;lt;atag.size();i++)
	{
		var attr = atag.elementAt(i).getAttribute(&amp;quot;href&amp;quot;);
		if (attr.indexOf(filterStr) &amp;gt; -1)
			links.add(attr);
	} 
	return links;	
}

//================================================================// 
// 函数：doRequest(httpcall,ka) 
// 说明：通过配置参数直接从登录开始进入到订单的列表界面
// 参数：httpcall(Object),ka(String) 
// 返回：
// 样例：
// 作者：
// 创建日期：10/13/10 13:14:48
// 修改日志：
//================================================================// 
function doRequest(httpcall,ka,userid,passwd,vcode)
{
	var ret = &amp;quot;&amp;quot;;
	var db = new pubpack.EADatabase();
	var ds = db.QuerySQL(&amp;quot;select * from wg_request where ka=&amp;quot;+ka+&amp;quot; order by seqid&amp;quot;);
	for (var r = 0;r&amp;lt; ds.getRowCount();r++)
	{
		var url = ds.getStringAt(r,&amp;quot;URI&amp;quot;);
		var params = ds.getStringDef(r,&amp;quot;PARAMS&amp;quot;,&amp;quot;&amp;quot;);
		params = EAfunc.Replace(params,&amp;quot;动态用户名&amp;quot;,userid);
		params = EAfunc.Replace(params,&amp;quot;动态密码&amp;quot;,passwd);
		params = EAfunc.Replace(params,&amp;quot;动态验证码&amp;quot;,vcode);
		var encode = ds.getStringAt(r,&amp;quot;CODE&amp;quot;);
		var method = ds.getStringAt(r,&amp;quot;METHOD&amp;quot;);
		if (method.equals(&amp;quot;POST&amp;quot;)) ret = httpcall.Post(url,params,encode);
		if (method.equals(&amp;quot;GET&amp;quot;))  ret = httpcall.Get(url,encode);			
	}
	return ret;
		
}

//================================================================// 
// 函数：parserHtmlforUrl(url,str)
// 说明：可以直接对url进行解析成nodelist
// 参数：
// 返回：
// 样例：
// 作者：XHJ
// 创建日期：05/25/11 16:17:28
// 修改日志：
//================================================================// 
function parserHtmlforUrl(url,str)
{
	var ps = new htmlparser.Parser(url);
	var filter = new tagFilter.TagNameFilter(str);
	return ps.extractAllNodesThatMatch(filter);
}

/*
	订单列表页面的形态分析
	1.有日期查询参数，不管在不在&amp;lt;TABlE&amp;gt;中可以在PAGE页面代码通过&amp;lt;a href&amp;gt;来识别
	2.没有查询参数，在一个TABLE中有日期的标识，需要解析订单列表的TABLE来获得所需要日期的&amp;lt;a href&amp;gt;链接	
	3.新订单页面，只要抓完后就会消失的页面，可以不管日期，直接取得所有订单的&amp;lt;a href&amp;gt;
*/</GRDOSDS_VALUE></ROW>
</ROWSET>
</grdosds><fldhdr>
<ROWSET>
<ROW num="0" ><BILID >1单据编号</BILID><STAT >0单据状态</STAT><SUBTYP >0子类型</SUBTYP><CORPID >0往来单位编号</CORPID><CORPNAM >0往来单位名称</CORPNAM><LOCID >0仓库|部门编号</LOCID><LOCNAM >0仓库|部门名称</LOCNAM><DAT >0单据日期</DAT><CRTUSR >1录入人</CRTUSR><CRTUSRNAM >0录入人姓名</CRTUSRNAM><CRTDAT >0录入日期</CRTDAT><CHKUSR >1审核人</CHKUSR><CHKUSRNAM >0审核人姓名</CHKUSRNAM><CHKDAT >0审核日期</CHKDAT><SUMQTY >0合计金额</SUMQTY><SUMMNY >0合计金额</SUMMNY><REFID1 >0扩展字段</REFID1><REFNAM1 >0扩展字段</REFNAM1><REFID2 >0扩展字段</REFID2><REFNAM2 >0扩展字段</REFNAM2><REFID3 >0扩展字段</REFID3><REFNAM3 >0扩展字段</REFNAM3><REFID4 >0扩展字段</REFID4><REFNAM4 >0扩展字段</REFNAM4><REFID5 >0扩展字段</REFID5><REFNAM5 >0扩展字段</REFNAM5><REFID6 >0扩展字段</REFID6><REFNAM6 >0扩展字段</REFNAM6><NOTE >0备注</NOTE></ROW>
</ROWSET>
</fldhdr><flddtl>
<ROWSET>
<ROW num="0" ><SEQID >1明细序号</SEQID><ITMID >1品种编号</ITMID><ITMNAM >0品种名称</ITMNAM><ITEMPC >0品种批次号</ITEMPC><ITMSPC >0规格</ITMSPC><UNIT >0计量单位</UNIT><SMLUNT >0小计量单位</SMLUNT><UNTNUM >0大单位转小单位因子</UNTNUM><PRICE >0价格</PRICE><QTY >0数量</QTY><TAXTYP >0税率类型</TAXTYP><NOTAXMNY >0不含税税额</NOTAXMNY><TAXMNY >0税额</TAXMNY><MNY >0下单金额</MNY><REFID1 >0扩展字段</REFID1><REFNAM1 >0扩展字段</REFNAM1><REFID2 >0扩展字段</REFID2><REFNAM2 >0扩展字段</REFNAM2><REFID3 >0扩展字段</REFID3><REFNAM3 >0扩展字段</REFNAM3><REFID4 >0扩展字段</REFID4><REFNAM4 >0扩展字段</REFNAM4><REFID5 >0扩展字段</REFID5><REFNAM5 >0扩展字段</REFNAM5></ROW>
</ROWSET>
</flddtl></mdroot>