<?xml version="1.0" encoding="GBK"?>
<dataFlow name="模板" ID="temp">
	<BilFlw name="生成目标定义">
		<ROWSET>
			<ROW name="记录">
				<DESC name="数据流描述"></DESC>
				<DESTCLS name="待生成的目标单据">SI</DESTCLS>
				<ValFld name="目标单据的字段">QTY</ValFld>
				<Filter name="数据过滤模式。0:(默认)不处理；1:对itemid相同的明细做分组汇总"></Filter>
				<MappedMode name="单据映射关系。0:(默认)多源单据对一目标单据映射；1:一对一映射"></MappedMode>
				<WriteBack name="修改目标单据时，是否回写数据流状态。0:不回写;1(默认):回写"></WriteBack>
				<SrcHdrFlds name="源单据头的转换">SUBTYP,CORPID,CORPNAM,LOCID,LOCNAM,NOTE,REFID1,REFNAM1,REFID2,REFNAM2,REFID6</SrcHdrFlds>
				<DestHdrFlds name="目标单据的对应转换字段">SUBTYP,CORPID,CORPNAM,LOCID,LOCNAM,NOTE,REFID1,REFNAM1,REFID2,REFNAM2,REFID6</DestHdrFlds>
				<OnConvertDtl name="datflwsta表中的一行记录转换到目标单据的xmlds中后发生">//
  //可用对象:eaContext,usrinf,srchdr,srcdtl(源单据明细),bilhdr(目标单据的单据头)
  //      bildtl(目标单据的明细),dtlrowno(当前的目标明细行号)
  //      flwstads(用户选择的数据流状态，包含字段：SRCBILTYP, SRCBIL, SRCBILSEQ,VALLEFT,val2Convert, MEMO1,MEMO2,GUID)
  //      flwstaidx(当前状态行)
    var pub = new JavaPackage("com.xlsgrid.net.pub");
  var checked=eaContext.getAttribute("_checked");
  var base=1.0;
  if(flwstads.getStringAt(flwstaidx,"srcbiltyp")=="SR")
    base = -1.0;
  if(checked==null)
  {
//    eaContext.setAttribute("_checked","");
    var c = flwstads.getRowCount();

//    throw new Exception(olddept);
//  for(var i=1;i&amp;lt;c;i++)
//    {
//      var id=flwstads.getStringAt(i,"refid2");
//      if(id!=oldid)
//        throw new Exception("您选择了多个不同的客户，不能合并在一张发票中，请重新选择。");
//    }   

    var sql= "";
  var firstcorp = flwstads.getStringAt(0,"REFID2");
  var db = eaContext.getEADatabase();  
  var acc = eaContext.getAccid();
  var firstka = db.GetSQL(" select nvl(refid,id) from corp where id=&amp;apos;"+firstcorp+"&amp;apos;");    
  var nextcorp = "";
  var nextka = "";
//  throw new Exception(firstka);
if(flwstads.getRowCount() &amp;gt; 1){
	  for(var r=1;r&amp;lt;flwstads.getRowCount();r++){
	  	nextcorp = flwstads.getStringAt(r,"REFID2");  
//	  	throw new Exception(nextcorp);	
	  	nextka = db.GetSQL(" select nvl(refid,id) from corp where id=&amp;apos;"+nextcorp+"&amp;apos;");  
	  	if(!firstka.equals(nextka)){
	  		throw new Exception("【生成错误！不同的渠道不能生成一张销售发票，请确认！】");
	  	}
	  }  
  }
    var oldrate=0;
    for(var i=0;i&amp;lt;c;i++)
    {
      var sql = "select nvl(REFID1,0) from bilhdr where acc=&amp;apos;"+usrinf.getAccid()+"&amp;apos; and BILTYP=&amp;apos;"+flwstads.getStringAt(i,"SRCBILTYP")+"&amp;apos; and  BILID=&amp;apos;"+flwstads.getStringAt(i,"srcbil")+"&amp;apos;";
//      throw new Exception(sql);
      var rate = 1.0 * pub.EADbTool.GetSQL(sql);
      if(i==0)oldrate = rate;
      //else throw new Exception(""+oldrate+","+rate);
//      throw new Exception(oldrate+"@@"+rate);
      if(rate !=oldrate)
        throw new Exception("您选择的单据有多个税率，不能合并在一张发票中，请重新选择。");
    }
  }
  //var 含税金额 = base * bildtl.getStringAt(dtlrowno,"MNY");
//  throw new Exception(bildtl.getStringAt(0,"QTY"));
	var dept = srchdr.getStringAt(0,"REFID6");
	bilhdr.setValueAt(0,"REFID6",dept);

	
  var 含税金额 = base * bildtl.getStringAt(dtlrowno,"QTY")*bildtl.getStringAt(dtlrowno,"PRICE");
//  throw new Exception(含税金额);
  //保留两位小数，保证和单据的显示值相符合
  含税金额 = 1.0*pub.EAFunc.formatDouble(含税金额,2 );
//  throw new Exception(含税金额);
  if(flwstads.getStringAt(flwstaidx,"srcbiltyp")=="SR")
    含税金额 = -含税金额; //销售退货，金额再取反一次，恢复原来的正负符号
  bildtl.setValueAt(dtlrowno,"MNY",含税金额);
  var rate = 1.0 * bilhdr.getStringAt(0,"REFID1");
  bildtl.setValueAt(dtlrowno,"REFID1",rate );
  var 不含税金额=pub.EAFunc.formatDouble(含税金额/(1.0+rate),2 );
//  throw new Exception(不含税金额);
  var 税额=含税金额-不含税金额;
  bildtl.setValueAt(dtlrowno,"TAXMNY",""+税额);//pub.EAFunc.formatDouble(税额,2 ));
  bildtl.setValueAt(dtlrowno,"NOTAXMNY",""+不含税金额);//pub.EAFunc.formatDouble(不含税金额,2 ));
  //明细备注
  //明细备注
  var 源单据类型 = flwstads.getStringAt(flwstaidx,"SRCBILTYP");
  var 源单据号 = flwstads.getStringAt(flwstaidx,"SRCBIL");
  //var 明细备注 = 源单据类型+"."+源单据号+"."+flwstads.getStringAt(flwstaidx,"SRCBILSEQ");
  //throw new Exception(明细备注);
  //bildtl.setValueAt(dtlrowno,"REFNAM1",明细备注);
  bildtl.setValueAt(dtlrowno,"REFID2",源单据类型);
  bildtl.setValueAt(dtlrowno,"REFNAM2",源单据号);
  //处理折扣率
  var zk = bildtl.getStringAt(dtlrowno,"refnam1");
  if(zk!="")
    bildtl.setValueAt(dtlrowno,"refnam1",base * zk);  
  
  //end of func</OnConvertDtl>
				<OnConvert name="所有来源转换到目标单据后，保存到数据库前发生">//
  //可用对象:eaContext,usrinf,srchdr,bilhdr(目标单据的单据头),bildtl(目标单据的明细)
  //      flwstads(用户选择的数据流状态，包含字段：SRCBILTYP, SRCBIL, SRCBILSEQ,VALLEFT,val2Convert, MEMO1,MEMO2,GUID)
  
  //end of func</OnConvert>
				<OnDelete name="删除目标单据时发生">//
  //可用对象:eaContext,_EADB
     var pub = new JavaPackage("com.xlsgrid.net.pub");    
//    var sumfield="QTY";
//    var itemfield  = "ITMID";
//    var dtlds = bildtl;
//    var itemcol = dtlds.getColumnLoc(itemfield);
//    var sortedds = dtlds.sort(itemcol);
//    var c = sortedds.getRowCount();
//    var sumcol = sortedds.getColumnLoc(sumfield);
//    var retds = new pub.EADS();
//    var olditem = "";
//    var curitem=-1;
//    var sumval=0.0;
//    var summny=0.0;
//    for(var i=0;i&amp;lt;c;i++)
//    {
//      var item = sortedds.getStringAt(i,itemcol);
//      //throw new Exception(item+","+olditem);
//      if(item!=olditem)
//      {
//        if(curitem&amp;gt;=0)
//        {
//          retds.setValueAt(curitem,sumcol,sumval);
//          retds.setValueAt(curitem,"PRICE",summny / sumval);
//        }
//        retds.copyOneRow(sortedds,i);
//        curitem = retds.getRowCount() - 1;
//        sumval = 0;
//        olditem=item;
//      }
//      var value = 1.0 * sortedds.getStringAt(i,sumcol);
//      sumval += value;
//      summny += 1.0 * sortedds.getStringAt(i,"MNY");
//    }
//      //throw new Exception(sumval+","+olditem);
//    if(curitem&amp;gt;=0)
//    {
//      retds.setValueAt(curitem,sumcol,sumval);
//      retds.setValueAt(curitem,"PRICE",summny / sumval);
//    }  
////得到合并后的数据，复制到bildtl中
//  var c = bildtl.getRowCount();
//  for(var i=0;i&amp;lt;c;i++)
//   bildtl.DeleteRow(0);
// bildtl.copyfrom(retds);//    return retds;

//对最后一笔税额进行调整，以平衡误差
var c=bildtl.getRowCount()-1;
var 总金额=0.0;
var 累计税额=0.0;
for(var i=0;i&amp;lt;c;i++)
{
  总金额 += 1.0 * bildtl.getStringAt(i,"MNY");
  累计税额 += 1.0 * bildtl.getStringAt(i,"TAXMNY");
}
var rate = 1.0 * bilhdr.getStringAt(0,"REFID1");
var 末行金额 = 1.0 * bildtl.getStringAt(c,"MNY");
总金额 += 末行金额;
var 总不含税金额=总金额/(1.0+rate);
var 总税额=1.0*pub.EAFunc.formatDouble(总金额-总不含税金额,2 );
//throw new Exception(""+总金额+","+总税额+","+累计税额);
var 调整税额=总税额-累计税额;
var 不含税金额=末行金额-调整税额;
bildtl.setValueAt(c,"TAXMNY",调整税额);
bildtl.setValueAt(c,"NOTAXMNY",不含税金额);
//throw new Exception(""+不含税金额+","+调整税额+","+末行金额);
  var xmldb = new JavaPackage("com.xlsgrid.net.xmldb");
  var accdb = new xmldb.EAACCXmlDB(usrinf.getAccid());
  var orgdb = accdb;//.getOrgDB();
  bilhdr.setValueAt(0,"REFID2",orgdb.getId());
  bilhdr.setValueAt(0,"REFNAM2",orgdb.getLngnam());
  bilhdr.setValueAt(0,"VENDTAXID",orgdb.getTaxno());
  var corpid = bilhdr.getStringAt(0,"CORPID");
  var db = eaContext.getEADatabase();
  var taxno=db.GetSQL("select taxno from corp where id=&amp;apos;"+corpid+"&amp;apos;");
  bilhdr.setValueAt(0,"CUSTTAXID",taxno);
  bilhdr.setValueAt(0,"SUBTYP",1);//默认为增值税票
//throw new Exception(taxno);
  //取最近的一张发票号码，加1作为新的发票号
//  var sql = "select bilid,bilid+1 from (select NVL(bilid,&amp;apos;X000001&amp;apos;) from bilhdr where acc=&amp;apos;"+usrinf.getAccid()+"&amp;apos; and biltyp=&amp;apos;SI&amp;apos; order by crtdat desc ) where rownum=1";
//  throw new Exception(sql);
//  var newNo = "";
//  try
//  {
//    var ds = db.QuerySQL(sql);
//    var no = ds.getStringAt(0,0);
//    var s = ds.getStringAt(0,1);
//    var zeros="0000000000";
//    var l = no.length();
//    newNo = zeros.substring(1,l-s.length()+1)+s;//补足前导0
//    //检查新号码的有效性
//    sql = "select count(*) from bilhdr where acc=&amp;apos;"+usrinf.getAccid()+"&amp;apos; and biltyp=&amp;apos;SI&amp;apos; and bilid=&amp;apos;"+newNo+"&amp;apos;";
//    var v = db.GetSQL(sql);
//    if(v==0)
//    {//有效的新号码
//    bilhdr.setValueAt(0,"bilid",newNo);
//    eaContext.setBilid(newNo);
//    }
//    throw new Exception(newNo);
//  }
//  catch(e)
//  {
//    throw new Exception("取最大单据号＋1错误，不做进一步处理");
//  } 
  //end of func</OnDelete>
				<REFID1 NAME="扩展字段REFID1用途">LOCID</REFID1>
				<REFNAM1 NAME="扩展字段REFNAM1用途">LOCNAM</REFNAM1>
				<REFID2 NAME="扩展字段REFID2用途">CORPID</REFID2>
				<REFNAM2 NAME="扩展字段REFNAM2用途">CORPNAM</REFNAM2>
</ROW>
</ROWSET>
</BilFlw>
	<srcBil name="来源单据信息">
		<ROWSET>
			<ROW name="记录">
				<SRCCLS name="可转换的单据">SO</SRCCLS>
				<ValFld name="待转换的字段：如果模式＝2，则该字段是单据头字段">QTY</ValFld>
				<ConvertTimes name="数据流可转换的次数：0=(默认)不限制;1=转换一次后关闭(设置endflg＝2)">0</ConvertTimes>
				<ValueMod name="数据转换模式:0=(默认)不限制;1=限制大于0;2=限制不大于剩余可转数;3=模式1和2的组合"></ValueMod>
				<ConvertMod name="单据转换模式:0=明细转换;1=(默认)整单转换;2=仅转换单据头;3=表头部分勾选"></ConvertMod>
				<where name="datflwsta表的过滤条件"></where>
				<OnBeforeGenSta name="开始构造datsta前发生，用于单据预处理。">//
  //可用对象:eaContext,_EADB,bilhdr,bildtl(单据数据集)
  //如果把bilhdr的BILID或bildtl的ITMID清空，则跳过该单据或明细
  
  //end of func</OnBeforeGenSta>
				<OnGenStaMemo name="构造bilfwsta的备注信息时发生">//
  //可用对象:sta(0:单据头;1:明细),ds(单据数据集),row(当前行号);
  //返回MEMO1或MEMO2,如果返回空字符,用默认的说明信息
  //如果把ds的BILID或ITMID清空，则跳过该单据或明细
  //如果要保存额外信息到  datflwsta 中,请当sta=0时设置ds的字段,后台处理时回自动保存到
  //对应的 datflwsta 字段中:
  //  LOCID  --  REFID1      LOCNAM  --  REFNAM1
  //  CORPID --  REFID2      CORPNAM --  REFNAM2
  //  SUBTYP --  SRCSUBTYP
  
  //end of func</OnGenStaMemo>
				<OnUnCkeck name="单据取消审核时发生">//
  //可用对象:eaContext,_EADB(EADatabase)
  
  //end of func</OnUnCkeck>
</ROW>
			<ROW name="记录">
				<SRCCLS name="可转换的单据">SR</SRCCLS>
				<ValFld name="待转换的字段：如果模式＝2，则该字段是单据头字段">QTY</ValFld>
				<ConvertTimes name="数据流可转换的次数：0=(默认)不限制;1=转换一次后关闭(设置endflg＝2)">O</ConvertTimes>
				<ValueMod name="数据转换模式:0=(默认)不限制;1=限制大于0;2=限制不大于剩余可转数;3=模式1和2的组合"></ValueMod>
				<ConvertMod name="单据转换模式:0=明细转换;1=(默认)整单转换;2=仅转换单据头;3=表头部分勾选"></ConvertMod>
				<where name="datflwsta表的过滤条件"></where>
				<OnBeforeGenSta name="开始构造datsta前发生，用于单据预处理。">//
  //可用对象:eaContext,_EADB,bilhdr,bildtl(单据数据集)
  //如果把bilhdr的BILID或bildtl的ITMID清空，则跳过该单据或明细
  
  //end of func</OnBeforeGenSta>
				<OnGenStaMemo name="构造bilfwsta的备注信息时发生">//
  //可用对象:sta(0:单据头;1:明细),ds(单据数据集),row(当前行号);
  //返回MEMO1或MEMO2,如果返回空字符,用默认的说明信息
  //如果把ds的BILID或ITMID清空，则跳过该单据或明细
  //如果要保存额外信息到  datflwsta 中,请当sta=0时设置ds的字段,后台处理时回自动保存到
  //对应的 datflwsta 字段中:
  //  LOCID  --  REFID1      LOCNAM  --  REFNAM1
  //  CORPID --  REFID2      CORPNAM --  REFNAM2
  //  SUBTYP --  SRCSUBTYP
  if(sta==1)
{
  //设置数据流备注
  var qty = ds.getStringAt(row,"qty");
  ds.setValueAt(row,"qty",-1.0 * qty);
  var mny = ds.getStringAt(row,"mny");
  ds.setValueAt(row,"mny",-1.0*mny);
  
  //设置数据流的状态
  var qty = bildtlraw.getStringAt(row,"qty");
  bildtlraw.setValueAt(row,"qty",-1.0 * qty);
  
//  throw new Exception(bildtl.getRowCount());
// for(var row = 0;row &amp;lt;bildtl.getRowCount();row ++)
//  {
//  	if(bildtl.getStringAt(row,"QTY") == 0.0)
//  	{
//  		bildtl.setValueAt(row,"ITMID","");
//  	}
//  }
}
  //end of func</OnGenStaMemo>
				<OnUnCkeck name="单据取消审核时发生">//
  //可用对象:eaContext,_EADB(EADatabase)
  
  //end of func</OnUnCkeck>
</ROW>
</ROWSET>
</srcBil>
</dataFlow>
