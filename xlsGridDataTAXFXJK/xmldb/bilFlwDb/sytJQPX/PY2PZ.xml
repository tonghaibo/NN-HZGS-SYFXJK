<?xml version="1.0" encoding="GBK"?>
<dataFlow name="付款单 生成 凭证" ID="PY2PZ">
	<BilFlw name="生成目标定义">
		<ROWSET>
			<ROW name="记录">
				<DESC name="数据流描述"></DESC>
				<DESTCLS name="待生成的目标单据">PZ</DESTCLS>
				<ValFld name="目标单据的字段">NOTE</ValFld>
				<Filter name="数据过滤模式。0:(默认)不处理；1:对itemid相同的明细做分组汇总"></Filter>
				<MappedMode name="单据映射关系。0:(默认)多源单据对一目标单据映射；1:一对一映射"></MappedMode>
				<WriteBack name="修改目标单据时，是否回写数据流状态。0:不回写;1(默认):回写"></WriteBack>
				<SrcHdrFlds name="源单据头的转换">SUBTYP,CORPID,CORPNAM,LOCID,LOCNAM,NOTE,REFID1,REFNAM1,REFID2,REFNAM2,REFID3</SrcHdrFlds>
				<DestHdrFlds name="目标单据的对应转换字段">SUBTYP,CORPID,CORPNAM,LOCID,LOCNAM,NOTE,REFID1,REFNAM1,REFID2,REFNAM2,REFID3</DestHdrFlds>
				<OnConvertDtl name="datflwsta表中的一行记录转换到目标单据的xmlds中后发生"  >//
  //可用对象:eaContext,usrinf,srchdr,srcdtl(源单据明细),bilhdr(目标单据的单据头)
  //      bildtl(目标单据的明细),dtlrowno(当前的目标明细行号)
  //      flwstads(用户选择的数据流状态，包含字段：SRCBILTYP, SRCBIL, SRCBILSEQ,VALLEFT,val2Convert, MEMO1,MEMO2,GUID)
  //      flwstaidx(当前状态行)

 
  //end of func</OnConvertDtl>
				<OnConvert name="所有来源转换到目标单据后，保存到数据库前发生"  >//
  //可用对象:eaContext,usrinf,srchdr,bilhdr(目标单据的单据头),bildtl(目标单据的明细)
  //      flwstads(用户选择的数据流状态，包含字段：SRCBILTYP, SRCBIL, SRCBILSEQ,VALLEFT,val2Convert, MEMO1,MEMO2,GUID)
  throw new Exception("dddddddddddddddddd");
  var 业务员编号 = "";
  var 客户编号 = srchdr.getStringAt(0,"CORPID");
  bilhdr.setValueAt(0,"REFID2",业务员编号);
  bilhdr.setValueAt(0,"REFNAM2",客户编号);
 
  bilhdr.setValueAt(0,"SUBTYP",srchdr.getStringAt(0,"BILTYP"));
  //附件数默认为1
  bilhdr.setValueAt(0,"REFID1","1");   
  bilhdr.setValueAt(0,"NOTE","从付款单:"+srchdr.getStringAt(0,"bilid")+"生成;总金额:"+srchdr.getStringAt(0,"REFID3"));
  
  var oldcorp = flwstads.getStringAt(0,"REFID2");
  for(var row = 1;row&amp;lt;flwstads.getRowCount();row++){
      var corpid = flwstads.getStringAt(row,"REFID2");
      if(oldcorp!=corpid){
	  throw new Exception("生成失败，不同的客户不能勾成一张付款单，请确认！");
      }
  }

  var pubpack = new JavaPackage( "com.xlsgrid.net.pub" );
  var db = new pubpack.EADatabase();
  var summny =0.0;
  var pimny = 0.0;
  var pmmny = 0.0;
  var pzmny = 0.0;
  var row = -1;
  
  var kmid1 = "";
  var kmname1 = "";
  var kmid2 = "";
  var kmname2 = "";
  var kmid3 = "";
  var kmname3 = "";
  var mysql = "select a.accitmid,b.id,b.name accitmnam from accitmbind a,accitm b where a.accitmid=b.id and a.id=&amp;apos;01&amp;apos; and a.typ=&amp;apos;PYA&amp;apos;";
  var accitmDS = db.QuerySQL(mysql);
  throw new Exception(accitmDS.GetXml());
  //预付款借方科目
  kmid1 = accitmDS.getStringAt(0,"ACCITMID");
  kmname1 = accitmDS.getStringAt(0,"ACCITMNAM");
  //应付款借方科目
  mysql = "select a.accitmid,b.name accitmnam from accitmbind a,accitm b where a.accitmid=b.id and a.id=&amp;apos;02&amp;apos; and a.typ=&amp;apos;PYA&amp;apos;";
  accitmDS = db.QuerySQL(mysql);  
  kmid2 = accitmDS.getStringAt(0,"ACCITMID");
  kmname2 = accitmDS.getStringAt(0,"ACCITMNAM"); 
  //代垫费用借方科目	 
  mysql = "select a.accitmid,b.name accitmnam from accitmbind a,accitm b where a.accitmid=b.id and a.id=&amp;apos;03&amp;apos; and a.typ=&amp;apos;PYA&amp;apos;";
  accitmDS = db.QuerySQL(mysql);  
  kmid3 = accitmDS.getStringAt(0,"ACCITMID");
  kmname3 = accitmDS.getStringAt(0,"ACCITMNAM"); 
  
  var c=bildtl.getRowCount()-1;
  for(var i=c;i&amp;gt;=0;i--){
	bildtl.DeleteRow(i);
  }
  //付款单来源明细：(PI:采购发票,PM代垫费用,PZ:预付款)
  for(var r=0;r&amp;lt;flwstads.getRowCount();r++){
  	var bilid = flwstads.getStringAt(r,"SRCBIL");
  	var typ = flwstads.getStringAt(r,"SRCBILTYP");
  	var mny = 1.0*flwstads.getStringAt(r,"VALLEFT");
	summny = summny+mny;
	
	if (typ == "PI"){
		pimny = 1.0*flwstads.getStringAt(r,"VAL2CONVERT");
		row = bildtl.AddNullRow(-1);
		bildtl.setValueAt(row,"ITMID",kmid2);
		bildtl.setValueAt(row,"ITMNAM",kmname2);
		bildtl.setValueAt(row,"TAXMNY",pimny);
		bildtl.setValueAt(row,"REFNAM1","采购发票号["+bilid+"]");
	}
	else if (typ == "PM"){
		pmmny += 1.0*flwstads.getStringAt(r,"VAL2CONVERT");
	}
	else if (typ == "PZ"){
		pzmny += 1.0*flwstads.getStringAt(r,"VAL2CONVERT");
	}
  }
  row = bildtl.AddNullRow(-1);
  bildtl.setValueAt(row,"ITMID",kmid1);
  bildtl.setValueAt(row,"ITMNAM",kmname1);
  bildtl.setValueAt(row,"TAXMNY",pzmny);

  row = bildtl.AddNullRow(-1);
  bildtl.setValueAt(row,"ITMID",kmid3);
  bildtl.setValueAt(row,"ITMNAM",kmname3);
  bildtl.setValueAt(row,"TAXMNY",pmmny);
  
  //贷方银行科目
  var dfkmid = "";
  var dfkmname = "";	 
  mysql = "select a.accitmid,b.name accitmnam from accitmbind a,accitm b where a.accitmid=b.id and a.id=&amp;apos;01&amp;apos; and a.typ=&amp;apos;PYB&amp;apos;";
  accitmDS = db.QuerySQL(mysql);  
  dfkmid = accitmDS.getStringAt(0,"ACCITMID");
  dfkmname = accitmDS.getStringAt(0,"ACCITMNAM");
  
  row = bildtl.AddNullRow(-1);
  bildtl.setValueAt(row,"ITMID",dfkmid);
  bildtl.setValueAt(row,"ITMNAM",dfkmname);
  bildtl.setValueAt(row,"MNY",summny);

  
  //end of func
</OnConvert>
				<OnDelete name="删除目标单据时发生">//
  //可用对象:eaContext,_EADB
  
  //end of func</OnDelete>
				<REFID1 NAME="扩展字段REFID1用途">LOCID</REFID1>
				<REFNAM1 NAME="扩展字段REFNAM1用途">LOCNAM</REFNAM1>
				<REFID2 NAME="扩展字段REFID2用途">CORPID</REFID2>
				<REFNAM2 NAME="扩展字段REFNAM2用途">CORPNAM</REFNAM2>
</ROW>
</ROWSET>
</BilFlw>
	<srcBil name="来源单据信息">
		<ROWSET>
			<ROW name="记录">
				<SRCCLS name="可转换的单据">PY</SRCCLS>
				<ValFld name="待转换的字段：如果模式＝2，则该字段是单据头字段"  >TAXMNY</ValFld>
				<ConvertTimes name="数据流可转换的次数：0=(默认)不限制;1=转换一次后关闭(设置endflg＝2)"></ConvertTimes>
				<ValueMod name="数据转换模式:0=(默认)不限制;1=限制大于0;2=限制不大于剩余可转数;3=模式1和2的组合"></ValueMod>
				<ConvertMod name="单据转换模式:0=明细转换;1=(默认)整单转换;2=仅转换单据头;3=表头部分勾选"  ></ConvertMod>
				<where name="datflwsta表的过滤条件"></where>
				<OnBeforeGenSta name="开始构造datsta前发生，用于单据预处理。">//
  //可用对象:eaContext,_EADB,bilhdr,bildtl(单据数据集)
  //如果把bilhdr的BILID或bildtl的ITMID清空，则跳过该单据或明细
  
  //end of func</OnBeforeGenSta>
				<OnGenStaMemo name="构造bilfwsta的备注信息时发生">//
  //可用对象:sta(0:单据头;1:明细),ds(单据数据集),row(当前行号);
  //返回MEMO1或MEMO2,如果返回空字符,用默认的说明信息
  //如果把ds的BILID或ITMID清空，则跳过该单据或明细
  //如果要保存额外信息到  datflwsta 中,请当sta=0时设置ds的字段,后台处理时回自动保存到
  //对应的 datflwsta 字段中:
  //  LOCID  --  REFID1      LOCNAM  --  REFNAM1
  //  CORPID --  REFID2      CORPNAM --  REFNAM2
  //  SUBTYP --  SRCSUBTYP

  //end of func</OnGenStaMemo>
				<OnUnCkeck name="单据取消审核时发生">//
  //可用对象:eaContext,_EADB(EADatabase)
  
  //end of func</OnUnCkeck>
</ROW>
</ROWSET>
</srcBil>
</dataFlow>
