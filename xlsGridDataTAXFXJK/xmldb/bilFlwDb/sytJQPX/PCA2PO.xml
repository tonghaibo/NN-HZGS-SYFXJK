<?xml version="1.0" encoding="GBK"?>
<dataFlow name="模板" ID="temp">
	<BilFlw name="生成目标定义">
		<ROWSET>
			<ROW name="记录">
				<DESC name="数据流描述"></DESC>
				<DESTCLS name="待生成的目标单据">PO</DESTCLS>
				<ValFld name="目标单据的字段">QTY</ValFld>
				<Filter name="数据过滤模式。0:(默认)不处理；1:对itemid相同的明细做分组汇总"></Filter>
				<MappedMode name="单据映射关系。0:(默认)多源单据对一目标单据映射；1:一对一映射"></MappedMode>
				<WriteBack name="修改目标单据时，是否回写数据流状态。0:不回写;1(默认):回写"></WriteBack>
				<SrcHdrFlds name="源单据头的转换">SUBTYP,CORPID,CORPNAM,LOCID,LOCNAM,NOTE,REFID1,REFNAM1,REFID2,REFNAM2</SrcHdrFlds>
				<DestHdrFlds name="目标单据的对应转换字段">SUBTYP,CORPID,CORPNAM,LOCID,LOCNAM,NOTE,REFID1,REFNAM1,REFID2,REFNAM2</DestHdrFlds>
				<OnConvertDtl name="datflwsta表中的一行记录转换到目标单据的xmlds中后发生">//
  //可用对象:eaContext,usrinf,srchdr,srcdtl(源单据明细),bilhdr(目标单据的单据头)
  //      bildtl(目标单据的明细),dtlrowno(当前的目标明细行号)
  //      flwstads(用户选择的数据流状态，包含字段：SRCBILTYP, SRCBIL, SRCBILSEQ,VALLEFT,val2Convert, MEMO1,MEMO2,GUID)
  //      flwstaidx(当前状态行)
  	var pubpack = new JavaPackage( "com.xlsgrid.net.pub" );
	var func = new pubpack.EAFunc();  
	var srcqty =1.0 * flwstads.getStringAt(flwstaidx,"SRCVAL");
	var destqty =1.0 *  flwstads.getStringAt(flwstaidx,"val2Convert");
	var tax = destqty/srcqty;
	var db =new pubpack.EADatabase();
	var itmid = flwstads.getStringAt(flwstaidx,"REFID3");
	var sql = "select untnum from item where id=&amp;apos;"+itmid+"&amp;apos;";
	var untnum = db.GetSQL(sql);
	bildtl.setValueAt(flwstaidx,"UNTNUM",untnum);
	bildtl.setValueAt(flwstaidx,"MNY",func.Round(tax*1.0*bildtl.getStringAt(flwstaidx,"MNY"),2));		
  //end of func</OnConvertDtl>
				<OnConvert name="所有来源转换到目标单据后，保存到数据库前发生">//
  //可用对象:eaContext,usrinf,srchdr,bilhdr(目标单据的单据头),bildtl(目标单据的明细)
  //      flwstads(用户选择的数据流状态，包含字段：SRCBILTYP, SRCBIL, SRCBILSEQ,VALLEFT,val2Convert, MEMO1,MEMO2,GUID)
  var pubpack = new JavaPackage("com.xlsgrid.net.pub");	
  var db = new pubpack.EADatabase();
  var srcid = flwstads.getStringAt(0,"SRCBIL");	
  bilhdr.setValueAt(0,"REFID1",srcid);
  var potax = srcdtl.getStringAt(0,"TAXTYP");
  bilhdr.setValueAt(0,"REFID6",potax );
  var srcsenddat = srchdr.getStringAt(0,"REFNAM5");
  bilhdr.setValueAt(0,"REFNAM3",srcsenddat );
  var sql1 = "select guid from bilhdr where biltyp = &amp;apos;PC&amp;apos; and bilid = &amp;apos;"+srcid+"&amp;apos;";
  var srcguid = db.GetSQL(sql1);
  var sql2 = "select value from bilhdrext a,bilhdr b where a.billguid = b.guid and b.guid = &amp;apos;"+srcguid+"&amp;apos; and id = &amp;apos;CORPTEL&amp;apos;";
  var corptel = db.GetSQL(sql2);
  bilhdr.setValueAt(0,"REFNAM5",corptel);
  var sql3 = "select value from bilhdrext a,bilhdr b where a.billguid = b.guid and b.guid = &amp;apos;"+srcguid+"&amp;apos; and id = &amp;apos;CORPADDR&amp;apos;";
  var corpaddr = db.GetSQL(sql3);
  bilhdr.setValueAt(0,"REFID5",corpaddr);
  var corpid = srchdr.getStringAt(0,"REFID2");
  bilhdr.setValueAt(0,"REFID4",corpid);
  var corpnam = srchdr.getStringAt(0,"REFNAM6");
  bilhdr.setValueAt(0,"REFNAM4",corpnam);
   var sql4 = "select value from bilhdrext a,bilhdr b where a.billguid = b.guid and b.guid = &amp;apos;"+srcguid+"&amp;apos; and id = &amp;apos;CORPUSR&amp;apos;";
  var corpusr = db.GetSQL(sql4);
  bilhdr.setValueAt(0,"REFNAM6",corpusr);
  
    var acc = bilhdr.getStringAt(0,"acc");
  var srcbilid = srcdtl.getStringAt(0,"bilid");
  
  var count = db.GetSQL("select count(*) from bilhdr where biltyp=&amp;apos;PO&amp;apos; AND ACC=&amp;apos;"+acc+"&amp;apos; and substr(bilid,0,instr(bilid,&amp;apos;-&amp;apos;)-1)=&amp;apos;"+srcbilid+"&amp;apos;\n");
  if(count==0){
  	bilhdr.setValueAt(0,"BILID",srcbilid+"-1");
  	for(var r=0;r&amp;lt;srcdtl.getRowCount();r++){
  		bildtl.setValueAt(r,"BILID",srcbilid+"-1");
  	}
	eaContext.setBilid(srcbilid+"-1");  	
  }
  else {
  	var maxseq = db.GetSQL(" select max(substr(bilid,instr(bilid,&amp;apos;-&amp;apos;)+1,length(bilid)))+1 from bilhdr where substr(bilid,0,length(&amp;apos;"+srcbilid+"&amp;apos;))=&amp;apos;"+srcbilid+"&amp;apos; and biltyp=&amp;apos;PO&amp;apos; and acc=&amp;apos;"+acc+"&amp;apos;");
  	bilhdr.setValueAt(0,"BILID",srcbilid+"-"+maxseq);
  	for(var r=0;r&amp;lt;srcdtl.getRowCount();r++){
  		bildtl.setValueAt(r,"BILID",srcbilid+"-"+maxseq);
  	}
  	eaContext.setBilid(srcbilid+"-"+maxseq);  
  }		
  
  //设定单价
  for(var r=0;r&amp;lt;bildtl.getRowCount();r++){
	var mny =1.0* bildtl.getStringAt(r,"MNY");
	var qty =1.0* bildtl.getStringAt(r,"QTY");
//	var untnum =1.0* bildtl.getStringAt(r,"UNTNUM");
//	qty = qty*untnum;
	if(qty!=0){
		bildtl.setValueAt(r,"PRICE",mny/qty);
	}	
  }  
  //end of func</OnConvert>
				<OnDelete name="删除目标单据时发生">//
  //可用对象:eaContext,_EADB
  
  //end of func</OnDelete>
				<REFID1 NAME="扩展字段REFID1用途">LOCID</REFID1>
				<REFNAM1 NAME="扩展字段REFNAM1用途">LOCNAM</REFNAM1>
				<REFID2 NAME="扩展字段REFID2用途">CORPID</REFID2>
				<REFNAM2 NAME="扩展字段REFNAM2用途">CORPNAM</REFNAM2>
</ROW>
</ROWSET>
</BilFlw>
	<srcBil name="来源单据信息">
		<ROWSET>
			<ROW name="记录">
				<SRCCLS name="可转换的单据">PC</SRCCLS>
				<ValFld name="待转换的字段：如果模式＝2，则该字段是单据头字段">QTY</ValFld>
				<ConvertTimes name="数据流可转换的次数：0=(默认)不限制;1=转换一次后关闭(设置endflg＝2)"></ConvertTimes>
				<ValueMod name="数据转换模式:0=(默认)不限制;1=限制大于0;2=限制不大于剩余可转数;3=模式1和2的组合"></ValueMod>
				<ConvertMod name="单据转换模式:0=明细转换;1=(默认)整单转换;2=仅转换单据头;3=表头部分勾选"></ConvertMod>
				<where name="datflwsta表的过滤条件"></where>
				<OnBeforeGenSta name="开始构造datsta前发生，用于单据预处理。">//
  //可用对象:eaContext,_EADB,bilhdr,bildtl(单据数据集)
  //如果把bilhdr的BILID或bildtl的ITMID清空，则跳过该单据或明细
  
  //end of func</OnBeforeGenSta>
				<OnGenStaMemo name="构造bilfwsta的备注信息时发生">//
  //可用对象:sta(0:单据头;1:明细),ds(单据数据集),row(当前行号);
  //返回MEMO1或MEMO2,如果返回空字符,用默认的说明信息
  //如果把ds的BILID或ITMID清空，则跳过该单据或明细
  //如果要保存额外信息到  datflwsta 中,请当sta=0时设置ds的字段,后台处理时回自动保存到
  //对应的 datflwsta 字段中:
  //  LOCID  --  REFID1      LOCNAM  --  REFNAM1
  //  CORPID --  REFID2      CORPNAM --  REFNAM2
  //  SUBTYP --  SRCSUBTYP
  //end of func</OnGenStaMemo>
				<OnUnCkeck name="单据取消审核时发生">//
  //可用对象:eaContext,_EADB(EADatabase)
  
  //end of func</OnUnCkeck>
</ROW>
</ROWSET>
</srcBil>
</dataFlow>
